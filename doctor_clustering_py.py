# -*- coding: utf-8 -*-
"""Doctor_clustering.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g9LHUgLL9pHhyIMSvDu98lYM-qeAiAfa
"""

from Doctor_visualization import Visualization


class Clustering:
  def cluster_features(*column_names):
    # Select features for clustering
    features_for_clustering = df[column_names]
    return features_for_clustering

    """
    Selects specific columns from a DataFrame for clustering.

    Parameters:
    - *column_names (str): Variable-length argument list of column names to be selected for clustering.

    Returns:
    - pandas.DataFrame: Subset of the DataFrame containing only the specified columns.


    """

  def category_column_encoding(df):
    # Identify categorical columns
    categorical_cols = df.select_dtypes(include=['object']).columns
    # Use LabelEncoder to convert categorical columns to numerical values
    le = LabelEncoder()
    for col in categorical_cols:
        df[col] = le.fit_transform(df[col])
    return df
    """
    Encodes categorical columns in a DataFrame using LabelEncoder.

    Parameters:
    - df (pandas.DataFrame): The input DataFrame containing categorical columns to be encoded.

    Returns:
    - pandas.DataFrame: A new DataFrame with encoded numerical values for categorical columns.


    """

  def numerical_column_scaling(df, *num_cols):
    # Standardize numerical features
    numeric_cols = num_cols
    numeric_transformer = Pipeline(steps=[
        ('scaler', StandardScaler())
    ])
    return numeric_transformer, numeric_cols
    """
    Applies numerical column scaling to specified columns in a DataFrame.

    Parameters:
    - df (pandas.DataFrame): The input DataFrame containing numerical columns to be scaled.
    - *num_cols (str): Variable-length argument list of numerical column names to be scaled.

    Returns:
    - sklearn.compose.ColumnTransformer: A ColumnTransformer object configured for numerical scaling.
    - list: List of numerical column names specified for scaling.

    """

  def data_transform (numeric_transformer, numeric_cols):
    # Combine transformers
    preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_cols)
    ])
    return preprocessor
    """
    Applies data transformation using a pre-defined numeric transformer on specified columns.

    Parameters:
    - numeric_transformer (sklearn.pipeline.Pipeline): Pre-defined numeric transformer for scaling.
    - numeric_cols (list): List of numerical column names to be transformed.

    Returns:
    - sklearn.compose.ColumnTransformer: A ColumnTransformer object configured for data transformation.

    """

  def kmeans_clustering (preprocessor):
    # Apply K-means clustering
    kmeans = KMeans(n_clusters=3, random_state=42)
    # Create a pipeline for preprocessing and clustering
    kmeans_pipeline = Pipeline(steps=[
        ('preprocessor', preprocessor),
        ('kmeans', kmeans)
    ])
    return kmeans_pipeline
    """
    Applies K-means clustering on pre-processed data using a specified preprocessor.

    Parameters:
    - preprocessor (sklearn.compose.ColumnTransformer): Preprocessor for data transformation.

    Returns:
    - sklearn.pipeline.Pipeline: A pipeline combining the preprocessor and K-means clustering.

    """

  def kmodes_clustering(preprocessor):
    #Apply k-modes clustering
    kmodes = KModes(n_clusters=3, init='Huang', n_init=5, verbose=1, random_state=42)
    # Create a pipeline for preprocessing and clustering
    kmodes_pipeline = Pipeline(steps=[
        ('preprocessor', preprocessor),
        ('kmodes', kmodes)
    ])
    return kmodes_pipeline
    """
    Applies K-Modes clustering on pre-processed data using a specified preprocessor.

    Parameters:
    - preprocessor (sklearn.compose.ColumnTransformer): Preprocessor for data transformation.

    Returns:
    - sklearn.pipeline.Pipeline: A pipeline combining the preprocessor and K-Modes clustering.

    """

  def clusters_fit_predict(df, kmeans_pipeline,kmodes_pipeline, features_for_clustering):
    # Fit and predict
    df['kmeans_Cluster'] = kmeans_pipeline.fit_predict(features_for_clustering)
    df['kmodes_Cluster'] = kmodes_pipeline.fit_predict(features_for_clustering)
    return df
    """
    Fits and predicts clusters using K-means and K-Modes pipelines on specified features.

    Parameters:
    - df (pandas.DataFrame): The input DataFrame.
    - kmeans_pipeline (sklearn.pipeline.Pipeline): Pipeline for K-means clustering.
    - kmodes_pipeline (sklearn.pipeline.Pipeline): Pipeline for K-Modes clustering.
    - features_for_clustering (pandas.DataFrame): Subset of DataFrame containing features for clustering.

    Returns:
    - pandas.DataFrame: The input DataFrame with additional columns for K-means and K-Modes cluster labels.

    """

#read_file here
df = pd.read_excel("/content/doctors_data.xlsx")

cluster_object = Clustering()
column_list = ["Doctor Name", "Speciality", "Education", "Registration No.", "Experience", "Location"]
features_for_clustering = cluster_object.cluster_features(column_list)
df = cluster_object.category_column_encoding(df)
num_cols = ["Registration No.", "Experience"]
numeric_transformer, numeric_cols = cluster_object.numerical_column_scaling(df,)
preprocessor = cluster_object.data_transform(numeric_transformer, numeric_cols)
kmeans_pipeline = cluster_object.kmeans_clustering(preprocessor)
kmodes_pipeline = cluster_object.kmodes_clustering(preprocessor)
df = cluster_object.clusters_fit_predict(df, kmeans_pipeline,kmodes_pipeline, features_for_clustering)

visual_object = Visualization()
visual_object.scatter_plot_vis('Speciality','Location')
visual_object.histogram_vis('Speciality','Location')

